@model BloggieWebsite.Models.View_Model.BlogDetailsViewModel
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager

@{
    ViewData["Title"] = Model.PageTitle;
}
<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">
            @if (Model != null)
            {
                <h1 class="mb-3">@Model.Heading</h1>
                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">@Model.Author</span>
                    <span class="text-secondary">@Model.PublishedDate.ToShortDateString()</span>
                </div>
                <div class="mb-3">
                    @if (signInManager.IsSignedIn(User))
                    {
                        @if (Model.Liked)
                        {
                            <a style="cursor:pointer;">
                                <i class="bi bi-hand-thumbs-up-fill"></i>

                            </a>
                        }
                        else
                        {
                            <a id="btnLiked" style="cursor:pointer;">
                                <i class="bi bi-hand-thumbs-up"></i>

                            </a>
                        }

                    }
                    <span id="totalLikes">@Model.TotalLikes</span> Likes

                </div>
                <div class="mb-3 d-flex">
                    @foreach (var tag in Model.Tags)
                    {
                        <span class="badge bg-secondary me-1">@tag.Name</span>
                    }
                </div>
                <img src="@Model.FeaturedImageUrl" alt="BlogPost.Display picture" class="mb-3 d-block img-fluid" />

                <div class="mb-5 blog-details-content">
                    <p>@Html.Raw(Model.Content)</p>
                </div>


            }
            else
            {
                <p>Blog Post Not Found</p>
            }
        </div>
    </div>
</div>
<div class="container-fluid">


    <div class="Card">
        <div class="card-header">
            <h5> Comments </h5>
            @if (signInManager.IsSignedIn(User))
            {
                <form method="post">
                    <div class="mb-3">
                        <label class="form-label">Comment</label>
                        <input type="text" class="form-control" asp-for="commentDescription" />

                    </div>
                    <div class="mb-3">
                        <button type="submit" class="btn btn-primary">Post Comment</button>
                        <input type="hidden" asp-for="Id" />
                        <input type="hidden" asp-for="Urlhandle" />
                    </div>

                </form>
            }

        </div>
        <div class="card-body">
            @if (Model.Comments != null && Model.Comments.Any())
            {
                @foreach(var comment in Model.Comments)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <div>
                                @comment.Comment
                            </div>
                            <div class="d-flex justify-content-between">
                                <span class="text-secondary">@comment.UserName</span>
                                <span class="text-secondary">@comment.DateAddes.ToShortDateString()</span>

                            </div>
                        </div>
                    </div>
                }
               
            }
        </div>
    </div>
</div>





@section Scripts {
    <script>
        const btnLikeElement = document.getElementById("btnLiked");
        const totalLikes = document.getElementById('totalLikes');

        async function GetTotalLikes() {
            fetch('/api/BlogPostLike/@Model.Id/totalLikes', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
            })
                .then(data => data.json())
                .then(result => totalLikes.innerHTML = result);
        }
        async function addLikeForBlog() {
            fetch('/api/BlogPostLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({
                    BlogPostId: '@Model.Id',
                    UserId: '@userManager.GetUserId(User)'
                })

            }).then(() => {
                btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
                btnLikeElement.removeEventListener('click', addLikeForBlog);
                GetTotalLikes();

            });
        }


        btnLikeElement.addEventListener('click', addLikeForBlog)

    </script>
}